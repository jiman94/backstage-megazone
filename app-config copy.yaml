app:
  title: 메가존 IDP
  baseUrl: http://localhost:3000

organization:
  name: 메가존

backend:
  baseUrl: http://localhost:7007
  listen:
    port: 7007
  csp:
    connect-src:
      - "'self'"
      - 'http:'
      - 'https:'
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml


# PG 
  database:
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      password: ${POSTGRES_PASSWORD}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}

# sqlite3 사용시 

  # database:
  #   client: pg
  #   #connection: ${DATABASE_URL}
  #   connection:
  #     host: ${POSTGRES_HOST}
  #     port: ${POSTGRES_PORT}
  #     user: ${POSTGRES_USER}
  #     password: ${POSTGRES_PASSWORD}

  # database:
  #   client: better-sqlite3
  #   connection: ':memory:'

# sqlite3 사용시 

  #database:
  #  client: better-sqlite3
  #  connection: ':memory:'
  # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
  # workingDirectory: /Temp


catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, Group, Resource, Location, Template, API]
  locations:
  # Note: integrations.github[].apps must be correctly configured to read GitHub locations
    - type: url
      target: https://github.com/jiman94/backstage-megazone/blob/main/catalog-entities/all.yaml
    - type: url
      target: https://github.com/jiman94/backstage-megazone/blob/main/catalog-entities/templates.yaml
    - type: url
      target: https://github.com/jiman94/backstage-megazone/blob/main/catalog-entities/users.yaml
      rules:
        - allow: [User]


  # --------------------------
  # for Local
  # --------------------------
  # Local example data, file locations are relative to the backend process, typically `packages/backend`

    # - type: file
    #   target: ../../catalog-entities/all.yaml
    # - type: file
    #   target: ../../catalog-entities/users.yaml
    #   rules:
    #     - allow: [User]

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/getting-started/configuration#setting-up-a-github-integration
      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  endpoints:
  # Plugin: Nexus Repository Manager
  # Plugin: Argocd
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs and an external cloud storage when deploying TechDocs for production use-case.
# 참고: 기본 설정을 실험해 본 후, 운영시 TechDocs를 배포할 때 CI/CD를 사용하여 문서와 외부 클라우드 저장소를 생성하세요.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach

techdocs:
  builder: 'local' # Alternatives - 'external'
  #builder: 'external' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
    #runIn: 'local' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}

        ## uncomment if using GitHub Enterprise
        # enterpriseInstanceUrl: ${AUTH_GITHUB_ENTERPRISE_INSTANCE_URL}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

# Plugin: Argocd

# Plugin: Jenkins

# Plugin: SonarQube


